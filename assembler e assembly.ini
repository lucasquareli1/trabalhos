
GRAN FACULDADE



CARLOS EDUARDO DA ROSA
DAVI ADAMES CORDEIRO
GUSTAVO MARCELO DE ARAÚJO
FILIPE AUGUSTO FREIRE DA SILVA
LUCAS GABRIEL QUARELI












LINGUAGEM DE MONTAGEM ASSEMBLER PC E ASSEMBLY COM C








CURITIBA 2023
 

SUMÁRIO


1.	INTRODUÇÃO............................................................................................................
2.	LINGUAGEM DE PROGRAMAÇÃO ASSEMBLY.....................................................
          2.1 ASSEMBLY E ASSEMBLER...................................................................................
3.	ASSEMBLER PC........................................................................................................
   3.1 MODO REAL...........................................................................................................
   3.2 MODO PROTEGIDO...............................................................................................
4.	ASSEMBLY COM C....................................................................................................
  4.1 DESENVOLVIMENTO DE CÓDIGO MISTO.......................................................... 


INTRODUÇÃO



Desde sempre, em qualquer momento histórico, os seres humanos sempre buscaram evoluir, cada vez mais se aprimorando e tornando a vida mais fácil ou também, mais rápida. Juntamente com isso, ao passar não somente das décadas, mas também séculos e milênios, as ferramentas que eram utilizadas no dia a dia também foram se aperfeiçoando, saímos do ponto inicial, onde o alimento era caçado com as próprias mãos, para uma época em que com simples toques em um celular, temos um banquete na porta da nossa própria casa, isso mostra o quanto a tecnologia foi evoluindo a medida em que o próprio ser humano foi evoluindo e, nesse documento, será abordado uma parte específica dessa evolução, onde se encontraram alguns conhecimentos sobre as linguagens de montagem e seu “montador” assembly e assembler respectivamente.


LINGUAGEM DE PROGRAMAÇÃO ASSEMBLY:

2.1 ASSEMBLY E ASSEMBLER



Também conhecida como “linguagem de máquina”, a linguagem assembly é uma linguagem de programação de baixo nível, isto é, suas representações visuais vão refletir símbolos que são mais próximos da linguagem computacional, ou seja, remetem mais a linguagem que a própria máquina se expressa, onde o programador trabalha de certa forma mais próximo a própria máquina, diretamente com o Hardware da mesma, diferentemente das linguagens que são consideradas como de alto nível, como Pascal e Java onde suas transcrições de códigos remetem mais a língua “humana”, possibilitando de certa forma, um entendimento mais fácil em relação aos aspectos do computador ou programa a ser analisado.
 

Pode ser descrita também, como uma espécie de tradutora para o código que as máquinas e computadores vão apresentar, fazendo essa transferência de linguagens através de um recurso denominado mnemônicos, manipulando os bits do programa e, na grande maioria dos casos, é utilizada para se trabalhar com microcontroladores e microprocessadores, que são, respectivamente, controladores que rodam sistemas diretamente em seus chips por não possuírem uma forma digital e, uma das peças fundamentais de todo e qualquer computador, denominado também de CPU, onde se passarão vários “comandos” e o mesmo executará as tarefas pedidas de acordo com suas configurações.
Seu surgimento se deve a uma necessidade específica da época, onde a programação enfrentava um problema de tamanho nos códigos, os quais eram programados inteiramente de forma binária (zeros e uns), fazendo com que programas ficassem imensos, ocupando muitas linhas e espaço na memória, além de que se tratava de uma forma de programação a qual era muito “instável”, onde um digito errado entre 0 e 1, poderia comprometer o funcionamento do programa, visto que para encontrar tal erro, demandaria um tempo muito grande.
Desta forma, para que essa questão pudesse ter uma solução, criou-se uma espécie de “linguagem simbólica”, onde cada sequência de números e endereços seriam representados por uma sequência de letras ou símbolos, dessa maneira, ainda que não fosse tão diferente do método anterior, já possibilitou agilizar em muito os processos, visto que agora, não seria mais necessário criar listas enormes com vários números e a cada modificação revisar todas as linhas e sim, apenas adicionar suas respectivas representações simbólicas ao código.
Já o assembler, conhecido também como o software “montador”, será responsável por pegar os dados em assembly e então organizá-los no programa, fazendo a utilização de rótulos e também endereços, que serão ajustados pelo próprio.
Portanto, assembly e assembler não são a mesma coisa como muitos pensam, enquanto um é responsável por “traduzir” os códigos em binário ou hexadecimal, o outro vai ajustar tudo que for necessário para fazer a montagem desse programa, fazendo assim com que os programas fiquem mais dinâmicos, deixando de usar
 

endereços e conteúdos que eram muito estáticos, por conta de serem compostos em seu todo por números (binários ou hexadecimal) e passar a usar rótulos e endereços que seguem um padrão, concedendo sequências de símbolos e letras para cada código.


ASSEMBLER PC


Como visto anteriormente no documento, o assembler serve como “montador”, ele será responsável por traduzir a linguagem de montagem assembly após a mesma transcrever os códigos binários ou hexadecimais para uma linguagem simbólica e, após esse processo, o montador vai utilizar essa tradução e adicionara rótulos e endereços nos mesmos, substituindo conjuntos de números, tornando assim a leitura do programa mais prática, economizando tempo que seria perdido analisando diversas linhas de códigos compostas por números.
Com a função de montador do código, o assembler pode trabalhar de várias formas enquanto traduz os códigos, podendo ser rodados tanto em processadores antigos, quanto nos mais novos, apenas fazendo uma alteração de “modo” em que vai rodar, estando eles presentes nos tópicos abaixo;


3.1	MODO REAL



Hoje em dia, quando ligamos nossos computadores, na maioria dos casos, podemos ver a logo do sistema operacional do Windows, a não ser que a máquina trabalhe com outro sistema operacional (como Linux ou Mac OS X), sendo assim, tudo que for feito enquanto o computador estiver ligado, será lido e interpretado por um desses sistemas operacionais.
O modo “real” é algo que serve para conceder instruções diretamente nos processadores, “conversando” diretamente com o hardware do computador, sem ter esse intermédio com o sistema operacional. Geralmente, era mais utilizado antigamente, 

para fornecer instruções para os processadores x86, utilizando-se da arquitetura com 16 bits.
Como visto anteriormente, pode-se relacionar a linguagem assembly com a linguagem C, e é desta forma que atualmente podem ser elaborados programas que possam ser executados pelos processadores mais antigos ou, que também possam ser emulados.
A BIOS (Basic Input/Output System), também conhecida como, “Sistema básico de entrada e saída”, é um exemplo de software que é inicializado através do modo real, pois o sistema operacional está localizado dentro do hd ou ssd do computador, os quais só são inicializados após passarem pela BIOS, contudo, hoje em dia esse modo acabou sendo deixado quase que totalmente para trás, dando lugar ao “modo protegido”, o qual será discutido no próximo tópico.


3.2	MODO PROTEGIDO



Diferentemente do “modo real”, o modo protegido limita a relação entre instruções do software com o hardware, e faz isso através do sistema operacional de cada computador, onde para uma instrução ser realizada ou qualquer coisa acontecer, primeiramente deve-se passar por eles. Levando tudo isso em conta, podemos concluir que o modo protegido faz uma regulamentação das atividades a serem realizadas, ocupando várias funções, sendo uma delas, como exemplo, o controle da memória, onde o mesmo a divide em partes para dificultar assim o acesso de softawares ou programas que possam causar danos ao hardware do computador.


ASSEMBLY COM C



Uma linguagem muito utilizada ainda nos dias de hoje é a linguagem C, a qual também tem uma relação um tanto quanto “próxima” da linguagem assembly, onde, um
 

programador pode escrever um código simples, como o famoso “Hello World” em C ou C++ e, posteriormente, traduzi-lo para a linguagem de assembly. Isso acontece, pois, os compiladores dessas linguagens se relacionam, possibilitando assim essa tradução de uma linguagem para a outra, desta forma, permitindo que o programador consiga identificar, por exemplo, erros ou redundâncias dentro do código.
Não necessariamente é necessário “traduzir” o código de uma linguagem para a outra, dentro da própria linguagem C, em alguns compiladores, é possível “ativar” as ferramentas da linguagem assembly, no compilador DEV-C++ por exemplo, a linguagem pode ser chamada através da palavra ou, comando chave “asm”.

4.1 DESENVOLVENDO CÓDIGO MISTO
